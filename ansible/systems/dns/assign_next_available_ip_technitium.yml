# ------------------------------------------------------------------------
# AIA (AI-Assisted Authoring) Statement:
# Portions of this playbook were co-authored with OpenAI's GPT-5 (ChatGPT).
# Used for syntactic refinement and automation pattern verification.
# All logic reviewed and validated by the human operator (Andrew Potozniak).
#
# AIA Ph CeNc Hin R OpenAI's GPT-5 (ChatGPT) v1.0 
# https://aiattribution.github.io/statements/AIA-Ph-CeNc-Hin-R-?model=OpenAI%27s%20GPT%252D5%20(ChatGPT)-v1.0
# ------------------------------------------------------------------------
---
- name: Assign Next Available IP Address in Zone Technitium DNS Server
  hosts: localhost
  gather_facts: false

  vars:
    technitium_api_host: "127.0.0.1"
    technitium_api_port: "5380"
    technitium_user: "admin"
    technitium_a_record_zone: "localdomain.local"
    technitium_a_record_hostname: "technitium-dns"
    technitium_a_record_ttl: 120 
    technitium_a_record_comments: "Autoassigned IP Address"
    technitium_a_record_create_ptr: true
    technitium_a_record_create_ptr_zone: true
    technitium_a_record_overwrite: false

    assignable_ip_range_slash_24_network_id: "127.0.0"
    assignable_ip_range_slash_24_host_id_start: 32
    assignable_ip_range_slash_24_host_id_end: 100
    assignable_ip_list: []
    taken_ip_list: []

  vars_prompt:
    - name: technitium_admin_password
      prompt: "Technitium Admin Password"
      unsafe: true
      private: true
      confirm: true

  # https://github.com/TechnitiumSoftware/DnsServer/blob/master/APIDOCS.md
  tasks:

    # AI Contribution Start
    - name: Create list of "Assignable" IPs
      ansible.builtin.set_fact:
        assignable_ip_list: "{{ query('sequence', 'start=' ~ assignable_ip_range_slash_24_host_id_start ~ ' end=' ~ assignable_ip_range_slash_24_host_id_end) | map('int') | map('regex_replace', '^(.*)$', assignable_ip_range_slash_24_network_id ~ '.\\1') | list }}"

    # - ansible.builtin.debug:
    #     var: assignable_ip_list
    # AI Contribution End

    - name: Login for {{ technitium_user }}
      ansible.builtin.uri:
        url: "http://{{ technitium_api_host }}:{{ technitium_api_port }}/api/user/login?user={{ technitium_user }}&pass={{ technitium_admin_password }}&includeInfo=true"
      register: technitium_login_results

    - name: Validate Login
      ansible.builtin.assert:
        that: technitium_login_results.json.status == "ok"
        fail_msg: "Login with defaults failed:  {{ technitium_login_results.json.errorMessage | default ('NO_ERROR_MESSAGE_AVAILABLE') }}"
        success_msg: "Login succeeded!"

    - name: Get IPs in Zone {{ technitium_a_record_zone }}
      ansible.builtin.uri:
        url: "http://{{ technitium_api_host }}:{{ technitium_api_port }}/api/zones/records/get?token={{ technitium_login_results.json.token }}&domain=all&zone={{ technitium_a_record_zone }}&listZone=true"
      register: technitium_zone_records_results

    - name: Validate Zone Record Retrieval
      ansible.builtin.assert:
        that: technitium_zone_records_results.json.status == "ok"
        fail_msg: "Zone Record Retrieval failed:  {{ technitium_zone_records_results.json.errorMessage | default ('NO_ERROR_MESSAGE_AVAILABLE') }}"
        success_msg: "Zone Record Retrieval succeeded!"

    # - name: output zone records
    #   ansible.builtin.debug:
    #     var: technitium_zone_records_results.json.response.records

    # - name: Output IP Addresses from only A Records
    #   ansible.builtin.debug:
    #     var: item.rData.ipAddress
    #   with_items: "{{ technitium_zone_records_results.json.response.records }}"
    #   when: item.type == 'A'

    - name: Create Taken IP List From Zone Records
      ansible.builtin.set_fact:
        taken_ip_list: "{{ taken_ip_list + [item.rData.ipAddress] }}"
      with_items: "{{ technitium_zone_records_results.json.response.records }}"
      when: item.type == 'A'

    # - name: DEBUG TAKEN LIST
    #   ansible.builtin.debug:
    #     var: taken_ip_list

    - name: Set Theory Difference to create actual available assignable IP list
      ansible.builtin.set_fact:
        available_assignable_ip_list: "{{ assignable_ip_list | difference(taken_ip_list) | sort }}"

    - name: Assert we have at least one IP Address that we can assignable
      ansible.builtin.assert:
        that: available_assignable_ip_list | length > 0
        fail_msg: "No more IPs are available for assignment"
        success_msg: "Assignable IP Found!"

    # - name: DEBUG AVAILABLE LIST
    #   ansible.builtin.debug:
    #     var: available_assignable_ip_list

    - name: Set variable for IP {{ available_assignable_ip_list[0] }}
      ansible.builtin.set_fact:
        the_ip: "{{ available_assignable_ip_list[0] }}"

    - name: "Create 'A' Record '{{ technitium_a_record_hostname }}' -> '{{ the_ip }}' (with reverse record PTR and reverse zone for reverse record) in {{ technitium_a_record_zone }}"
      ansible.builtin.uri:
        url: "http://{{ technitium_api_host }}:{{ technitium_api_port }}/api/zones/records/add?token={{ technitium_login_results.json.token }}&zone={{ technitium_a_record_zone }}&domain={{ technitium_a_record_hostname }}.{{ technitium_a_record_zone }}&ipAddress={{ the_ip }}&type=A&ttl={{ technitium_a_record_ttl }}&comments={{ technitium_a_record_comments | urlencode }}&ptr={{ technitium_a_record_create_ptr }}&createPtrZone={{ technitium_a_record_create_ptr_zone }}&overwrite={{ technitium_a_record_overwrite }}"
      register: technitium_a_record_creation_results

    # - name: Output 'A' Record Creation
    #   ansible.builtin.debug:
    #     var: technitium_a_record_creation_results

    - name: Validate 'A' Record Creation
      ansible.builtin.assert:
        that: technitium_a_record_creation_results.json.status == "ok"
        fail_msg: "'A' Record Creation failed:  {{ technitium_a_record_creation_results.json.errorMessage | default ('NO_ERROR_MESSAGE_AVAILABLE') }}"
        success_msg: "'A' Record Creation succeeded!"
